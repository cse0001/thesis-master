% Generated by BUPTThesis.bst, version: 1.0 Beta 1 (2009/05/31)
\begin{thebibliography}{10}

\bibitem{artho2012software}
Artho~C, Suzaki~K, Di~Cosmo~R, et~al.
Why do software packages conflict?~[C].
2012 9th IEEE Working Conference on Mining Software Repositories (MSR).
2012:  141--150.

\bibitem{wang2018dependency}
Wang~Y, Wen~M, Liu~Z, et~al.
Do the dependency conflicts in my project matter?~[C].
Proceedings of the 2018 26th ACM joint meeting on european software engineering
  conference and symposium on the foundations of software engineering.
2018:  319--330.

\bibitem{vasilakis2018breakapp}
Vasilakis~N, Karel~B, Roessler~N, et~al.
BreakApp: Automated, Flexible Application Compartmentalization.~[C].
NDSS.
2018.

\bibitem{kula2017impact}
Kula~R~G, Ouni~A, German~D~M, et~al.
On the impact of micro-packages: An empirical study of the npm javascript
  ecosystem~[J].
arXiv preprint arXiv:1709.04638.
2017.

\bibitem{liang1998dynamic}
Liang~S, Bracha~G.
Dynamic class loading in the Java virtual machine~[J].
Acm sigplan notices.
1998, 33~(10):  36--44.

\bibitem{王莹2023开源软件库生态治理技术研究综述}
王莹, 伍盈欣, 高天, et~al.
开源软件库生态治理技术研究综述: 二十年进展~[J].
软件学报.
2023, 35~(2):  629--674.

\bibitem{javan2023dependency}
Javan~Jafari~A, Costa~D~E, Shihab~E, et~al.
Dependency update strategies and package characteristics~[J].
ACM Transactions on Software Engineering and Methodology.
2023, 32~(6):  1--29.

\bibitem{zerouali2018empirical}
Zerouali~A, Constantinou~E, Mens~T, et~al.
An empirical analysis of technical lag in npm package dependencies~[C].
International Conference on Software Reuse.
2018:  95--110.

\bibitem{patra2018conflictjs}
Patra~J, Dixit~P~N, Pradel~M.
Conflictjs: finding and understanding conflicts between javascript
  libraries~[C].
Proceedings of the 40th International Conference on Software Engineering.
2018:  741--751.

\bibitem{abate2020dependency}
Abate~P, Di~Cosmo~R, Gousios~G, et~al.
Dependency solving is still hard, but we are getting better at it~[C].
2020 IEEE 27th International Conference on Software Analysis, Evolution and
  Reengineering (SANER).
2020:  547--551.

\bibitem{claes2015historical}
Claes~M, Mens~T, Di~Cosmo~R, et~al.
A historical analysis of Debian package incompatibilities~[C].
2015 IEEE/ACM 12th Working Conference on Mining Software Repositories.
2015:  212--223.

\bibitem{trezentos2010apt}
Trezentos~P, Lynce~I, Oliveira~A~L.
Apt-pbo: solving the software dependency problem using pseudo-boolean
  optimization~[C].
Proceedings of the 25th IEEE/ACM International Conference on Automated Software
  Engineering.
2010:  427--436.

\bibitem{wang2022smartpip}
Wang~C, Wu~R, Song~H, et~al.
smartPip: A Smart Approach to Resolving Python Dependency Conflict Issues~[C].
Proceedings of the 37th IEEE/ACM International Conference on Automated Software
  Engineering.
2022:  1--12.

\bibitem{lieasypip}
Li~S.
EasyPip: Detect and Fix Dependency Problems in Python Dependency Declaration
  Files~[J].

\bibitem{wang2020watchman}
Wang~Y, Wen~M, Liu~Y, et~al.
Watchman: Monitoring dependency conflicts for python library ecosystem~[C].
Proceedings of the ACM/IEEE 42nd International Conference on Software
  Engineering.
2020:  125--135.

\bibitem{mukherjee2021PyDfix}
Mukherjee~S, Almanza~A, Rubio-Gonz{\'a}lez~C.
Fixing dependency errors for Python build reproducibility~[C].
Proceedings of the 30th ACM SIGSOFT international symposium on software testing
  and analysis.
2021:  439--451.

\bibitem{wang2021SnifferDog}
Wang~J, Li~L, Zeller~A.
Restoring execution environments of Jupyter notebooks~[C].
2021 IEEE/ACM 43rd International Conference on Software Engineering (ICSE).
2021:  1622--1633.

\bibitem{li2022nufix}
Li~Z, Wang~Y, Lin~Z, et~al.
Nufix: escape from NuGet dependency maze~[C].
Proceedings of the 44th International Conference on Software Engineering.
2022:  1545--1557.

\bibitem{wang2019could}
Wang~Y, Wen~M, Wu~R, et~al.
Could I have a stack trace to examine the dependency conflict issue?~[C].
2019 IEEE/ACM 41st International Conference on Software Engineering (ICSE).
2019:  572--583.

\bibitem{wang2021will}
Wang~Y, Wu~R, Wang~C, et~al.
Will dependency conflicts affect my program's semantics?~[J].
IEEE Transactions on Software Engineering.
2021, 48~(7):  2295--2316.

\bibitem{huang2020interactive}
Huang~K, Chen~B, Shi~B, et~al.
Interactive, effort-aware library version harmonization~[C].
Proceedings of the 28th ACM Joint Meeting on European Software Engineering
  Conference and Symposium on the Foundations of Software Engineering.
2020:  518--529.

\bibitem{Maven}
Maven~[EB/OL].
2024.
\url{https://mvnrepository.com/repos}Accessed: 2024-6-6.

\bibitem{NuGet}
NuGet.
2024.
\url{https://www.nuget.org}.
Accessed: 2024-6-6.

\bibitem{sakti2014instance}
Sakti~A, Pesant~G, Gu{\'e}h{\'e}neuc~Y-G.
Instance generator and problem representation to improve object oriented code
  coverage~[J].
IEEE Transactions on Software Engineering.
2014, 41~(3):  294--313.

\bibitem{falleri2014fine}
Falleri~J-R, Morandat~F, Blanc~X, et~al.
Fine-grained and accurate source code differencing~[C].
Proceedings of the 29th ACM/IEEE international conference on Automated software
  engineering.
2014:  313--324.

\bibitem{fraser2011evosuite}
Fraser~G, Arcuri~A.
Evosuite: automatic test suite generation for object-oriented software~[C].
Proceedings of the 19th ACM SIGSOFT symposium and the 13th European conference
  on Foundations of software engineering.
2011:  416--419.

\bibitem{zhang2020python}
Zhang~Z, Zhu~H, Wen~M, et~al.
How do python framework apis evolve? an exploratory study~[C].
2020 ieee 27th international conference on software analysis, evolution and
  reengineering (saner).
2020:  81--92.

\bibitem{foo2018efficient}
Foo~D, Chua~H, Yeo~J, et~al.
Efficient static checking of library updates~[C].
Proceedings of the 2018 26th ACM Joint Meeting on European Software Engineering
  Conference and Symposium on the Foundations of Software Engineering.
2018:  791--796.

\bibitem{mezzetti2018type}
Mezzetti~G, M{\o}ller~A, Torp~M~T.
Type regression testing to detect breaking changes in Node. js libraries~[C].
32nd european conference on object-oriented programming (ECOOP 2018).
2018.

\bibitem{moller2019model}
M{\o}ller~A, Torp~M~T.
Model-based testing of breaking changes in Node. js libraries~[C].
Proceedings of the 2019 27th ACM joint meeting on european software engineering
  conference and symposium on the foundations of software engineering.
2019:  409--419.

\bibitem{chen2020taming}
Chen~L, Hassan~F, Wang~X, et~al.
Taming behavioral backward incompatibilities via cross-project testing and
  analysis~[C].
Proceedings of the ACM/IEEE 42nd International Conference on Software
  Engineering.
2020:  112--124.

\bibitem{horton2019v2}
Horton~E, Parnin~C.
V2: Fast detection of configuration drift in python~[C].
2019 34th IEEE/ACM International Conference on Automated Software Engineering
  (ASE).
2019:  477--488.

\bibitem{ponomarenko2012backward}
Ponomarenko~A, Rubanov~V.
Automatic backward compatibility analysis of software component binary
  interfaces~[C].
2011 IEEE International Conference on Computer Science and Automation
  Engineering.
2011:  167--173.

\bibitem{jia2021depowl}
Jia~Z, Li~S, Yu~T, et~al.
DepOwl: Detecting Dependency Bugs to Prevent Compatibility Failures~[C].
2021 IEEE/ACM 43rd International Conference on Software Engineering (ICSE).
2021:  86--98.

\bibitem{brito2018apidiff}
Brito~A, Xavier~L, Hora~A, et~al.
APIDiff: Detecting API breaking changes~[C].
2018 IEEE 25th International Conference on Software Analysis, Evolution and
  Reengineering (SANER).
2018:  507--511.

\bibitem{silva2017refdiff}
Silva~D, Valente~M~T.
Refdiff: detecting refactorings in version histories~[C].
2017 IEEE/ACM 14th International Conference on Mining Software Repositories
  (MSR).
2017:  269--279.

\bibitem{du2022aexpy}
Du~X, Ma~J.
Aexpy: Detecting api breaking changes in python packages~[C].
2022 IEEE 33rd International Symposium on Software Reliability Engineering
  (ISSRE).
2022:  470--481.

\bibitem{revapi}
Krejci~L.
revapi.
2024.
\url{https://revapi.org/revapi-site/main/index.html}.
Accessed: 2024-6-6.

\bibitem{clirr}
K¨uhne~L.
clirr.
2024.
\url{https://clirr.sourceforge.net/}.
Accessed: 2024-6-6.

\bibitem{japicmp}
Mois~M.
japicmp.
2024.
\url{https://github.com/siom79/japicmp}.
Accessed: 2024-6-6.

\bibitem{SigTest}
Oracle.
SigTest.
2024.
\url{https://wiki.openjdk.java.net/display/CodeTools/SigTest}.
Accessed: 2024-6-6.

\bibitem{Poetry}
Poetry.
2024.
\url{https://python-poetry.org/docs/faq/}.
Accessed: 2024-6-6.

\bibitem{Conda}
Conda.
2024.
\url{https://conda.io/}.
Accessed: 2024-6-6.

\bibitem{Issue7239}
Issue 7239 of Conda.
2024.
\url{https://github.com/conda/conda/issues/7239}.
Accessed: 2024-6-6.

\bibitem{Issue8197}
Issue 8197 of Conda.
2024.
\url{https://github.com/conda/conda/issues/8197}.
Accessed: 2024-6-6.

\bibitem{Issue8810}
Issue 8810 of Conda.
2024.
\url{https://github.com/conda/conda/issues/8810}.
Accessed: 2024-6-6.

\bibitem{Issue9983}
Issue 9983 of Conda.
2024.
\url{https://github.com/conda/conda/issues/9983}.
Accessed: 2024-6-6.

\bibitem{Issue11414}
Issue 11414 of Conda.
2024.
\url{https://github.com/conda/conda/issues/11414}.
Accessed: 2024-6-6.

\bibitem{meng2012history}
Meng~S, Wang~X, Zhang~L, et~al.
A history-based matching approach to identification of framework evolution~[C].
2012 34th International Conference on Software Engineering (ICSE).
2012:  353--363.

\bibitem{wu2010aura}
Wu~W, Gu{\'e}h{\'e}neuc~Y-G, Antoniol~G, et~al.
Aura: a hybrid approach to identify framework evolution~[C].
Proceedings of the 32nd ACM/IEEE International Conference on Software
  Engineering-Volume 1.
2010:  325--334.

\bibitem{he2018understanding}
He~D, Li~L, Wang~L, et~al.
Understanding and detecting evolution-induced compatibility issues in Android
  apps~[C].
Proceedings of the 33rd ACM/IEEE International Conference on Automated Software
  Engineering.
2018:  167--177.

\bibitem{jezek2013software}
Jezek~K, Holy~L, Slezacek~A, et~al.
Software components compatibility verification based on static byte-code
  analysis~[C].
2013 39th Euromicro Conference on Software Engineering and Advanced
  Applications.
2013:  145--152.

\bibitem{li2018cid}
Li~L, Bissyand{\'e}~T~F, Wang~H, et~al.
Cid: Automating the detection of api-related compatibility issues in android
  apps~[C].
Proceedings of the 27th ACM SIGSOFT International Symposium on Software Testing
  and Analysis.
2018:  153--163.

\bibitem{balaban2005refactoring}
Balaban~I, Tip~F, Fuhrer~R.
Refactoring support for class library migration~[J].
ACM SIGPLAN Notices.
2005, 40~(10):  265--279.

\bibitem{henkel2005catchup}
Henkel~J, Diwan~A.
CatchUp! Capturing and replaying refactorings to support API evolution~[C].
Proceedings of the 27th international conference on Software engineering.
2005:  274--283.

\bibitem{perkins2005automatically}
Perkins~J~H.
Automatically generating refactorings to support API evolution~[C].
proceedings of the 6th ACM SIGPLAN-SIGSOFT Workshop on Program Analysis for
  Software Tools and Engineering.
2005:  111--114.

\bibitem{xing2007api}
Xing~Z, Stroulia~E.
API-evolution support with Diff-CatchUp~[J].
IEEE Transactions on Software Engineering.
2007, 33~(12):  818--836.

\bibitem{pip}
pip.
2024.
\url{https://pypi.org/project/pip/}.
Accessed: 2024-6-6.

\bibitem{npm}
npm.
2024.
\url{https://www.npmjs.com/}.
Accessed: 2024-6-6.

\bibitem{apt}
apt.
2024.
\url{https://help.ubuntu.com/lts/serverguide/apt.html.en}.
Accessed: 2024-6-6.

\bibitem{Fedora}
Fedora.
2024.
\url{https://fedoraproject.org/}.
Accessed: 2024-6-6.

\bibitem{wang2023automatically}
Wang~H, Liu~S, Zhang~L, et~al.
Automatically resolving dependency-conflict building failures via
  behavior-consistent loosening of library version constraints~[C].
Proceedings of the 31st ACM Joint European Software Engineering Conference and
  Symposium on the Foundations of Software Engineering.
2023:  198--210.

\bibitem{cao2024diagnosis}
Cao~Y, Chen~Z, Zhang~X, et~al.
Diagnosis of package installation incompatibility via knowledge base~[J].
Science of Computer Programming.
2024:  103098.

\bibitem{abate2012dependency}
Abate~P, Di~Cosmo~R, Treinen~R, et~al.
Dependency solving: a separate concern in component evolution management~[J].
Journal of Systems and Software.
2012, 85~(10):  2228--2240.

\bibitem{pip_doc}
pip documentation~[EB/OL].
2024.
\url{https://pip.pypa.io/en/stable/cli/pip_install/}Accessed: 2024-6-6.

\bibitem{docker}
Docker.
2024.
\url{https://www.docker.com/}.
Accessed: 2024-6-6.

\bibitem{pypi}
PyPI~[EB/OL].
2024.
\url{https://pypi.org/}Accessed: 2024-6-6.

\bibitem{libraries.io}
Libraries.io.
2024.
\url{https://libraries.io/}.
Accessed: 2024-6-6.

\bibitem{parso}
parso.
2024.
\url{https://pypi.org/project/parso/}.
Accessed: 2024-6-6.

\bibitem{dpkg}
Dpkg.
2024.
\url{https://wiki.debian.org/Teams/Dpkg/}.
Accessed: 2024-6-6.

\bibitem{pipdeptree}
pipdeptree.
2024.
\url{https://github.com/naiquevin/pipdeptree}.
Accessed: 2024-6-6.

\bibitem{partd}
partd.
2024.
\url{https://pypi.org/project/partd/}.
Accessed: 2024-6-6.

\bibitem{humanfriendly}
humanfriendly.
2024.
\url{https://pypi.org/project/humanfriendly/}.
Accessed: 2024-6-6.

\bibitem{xarray}
xarray.
2024.
\url{https://pypi.org/project/xarray/}.
Accessed: 2024-6-6.

\bibitem{marshmallow}
marshmallow.
2024.
\url{https://pypi.org/project/marshmallow/}.
Accessed: 2024-6-6.

\bibitem{StackOverflow}
Stack Overflow.
2024.
\url{https://stackoverflow.com/}.
Accessed: 2024-6-6.

\bibitem{GitHub}
GitHub.
2024.
\url{https://github.com/}.
Accessed: 2024-6-6.

\bibitem{questions61237965}
questions 61237965.
2024.
\url{https://stackoverflow.com/questions/61237965/no-module-named-numpy-testing-decorators}.
Accessed: 2024-6-6.

\bibitem{gradio_issue_5154}
Contributors~G~A.
Issue 5154 on gradio-app/gradio.
\url{https://github.com/gradio-app/gradio/issues/5154}.
2024.
Accessed: 2024-6-6.

\end{thebibliography}
